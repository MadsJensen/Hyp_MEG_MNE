source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_tone_df)
View(result_tone_df)
View(result_table)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
View(result_table)
result_table %>% filter(fdr_corr < 0.05)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
result_table %>% filter(fdr_corr < 0.05, condition == "Tone")
result_table %>% filter(fdr_corr < 0.05)
result_tone_df
result_table$pvalue
p.adjust(result_table$pvalue, method = "fdr")
result_table$fdr_corr == p.adjust(result_table$pvalue, method = "fdr")
p.adjust(result_table$pvalue, method = "fdr")
p.adjust(result_table$pvalue, method = "fdr") < 0.05
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
result_table %>% filter(fdr_corr < 0.05)
result_table
View(result_table)
p.adjust(result_table$pvalue, method = "fdr") < 0.05
p.adjust(result_table$pvalue, method = "fdr")
p.adjust(result_table$pvalue, method = "bonf")
p.adjust(result_table$pvalue, method = "holm")
result_table$pvalue
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
result_table
result_table %>% filter(fdr_corr < 0.05)
result_table %>% filter(fdr_corr < 0.05)
View(result_table)
library(BEST)
normal_cond
hyp_cond
BESTout <- BESTmcmc(normal_cond, hyp_cond)
summary(BESTout)
plot.all(BESTout)
plotAll(BESTout)
result_table %>% filter(pvalue < 0.05)
f1 <- read.csv("deg_press_hyp_BA_beta_MTC_MNE.csv", header =F)
getwd()
setwd("/home/mje/mnt/Hyp_meg/scratch/Tone_task_MNE/network_connect_res")
f1 <- read.csv("deg_press_hyp_BA_beta_MTC_MNE.csv", header =F)
f1
f2 <- read.csv("deg_press_normal_beta.csv_BA_beta_MTC_MNE.csv", header =F)
f2 <- read.csv("deg_press_normal_beta.csv", header =F)
f2
t.test(f2, f1)
permutation_test(f2, f1)
f1 <- as.matrix(f1)
f2 <- as.matrix(f2)
permutation_test(f2, f1)
tmp <- permutation_test(f2, f1)
tmp$pvalue
BESTout <- BESTmcmc(f2, f1)
plotAll(BESTout)
summary(BESTout)
BESTout$mu1
mean(BESTout$mu1) - mean(BESTout$mu2)
summary(BESTout)
library(BayesFactor)
ttestBF(f2, f1)
res <- ttestBF(f2, f1)
plot(res)
res
res@bayesFactor
res@bayesFactor$bf
log(res@bayesFactor$bf)
exp(res@bayesFactor$bf)
result$pvalue,
mean(normal_cond),
library(dplyr)
library(BayesFactor)
# PRESS load data and run permutation tests--------------------------------------
measures <- c("eff", "deg", "trans")
bands = c("theta", "alpha", "beta", "gamma_low", "gamma_high")
atlases <- c("BA")
colum_names <- c("atlas", "measure", "band", "pvalue",
"mean_normal", "mean_hyp", "sd_normal", "sd_hyp", "obs_diff")
counter <- 1
for (atlas in atlases){
for (measure in measures){
for (band in bands){
normal_cond = read.csv(paste(measure, "_press_normal_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
hyp_cond = read.csv(paste(measure, "_press_hyp_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
normal_cond <- as.matrix(normal_cond)
hyp_cond <- as.matrix(hyp_cond)
result <- ttestBF(normal_cond, hyp_cond)
result_name <- paste(atlas, "_", measure, "_", band, sep = "")
assign(result_name, result)
if (counter == 1){
df <- data.frame(atlas,
measure,
band,
exp(res@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond))
counter <- 2}
else {
df <- rbind(df, data.frame(atlas,
measure,
band,
exp(res@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond)))
}
}
}
}
names(df) <- colum_names
result_df <- tbl_df(df)
result_df$condition = "Press"
# TONE load data and run permutation tests--------------------------------------
measures <- c("eff", "deg", "trans")
bands = c("theta", "alpha", "beta", "gamma_low", "gamma_high")
atlases <- c("BA")
colum_names <- c("atlas", "measure", "band", "pvalue",
"mean_normal", "mean_hyp", "sd_normal", "sd_hyp", "obs_diff")
result_table <- NULL
counter <- 1
for (atlas in atlases){
for (measure in measures){
for (band in bands){
normal_cond = read.csv(paste(measure, "_tone_normal_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
hyp_cond = read.csv(paste(measure, "_tone_hyp_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
normal_cond <- as.matrix(normal_cond)
hyp_cond <- as.matrix(hyp_cond)
result <- ttestBF(normal_cond, hyp_cond)
result_name <- paste(atlas, "_", measure, "_", band, sep = "")
assign(result_name, result)
if (counter == 1){
df <- data.frame(atlas,
measure,
band,
exp(res@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond))
counter <- 2}
else {
df <- rbind(df, data.frame(atlas,
measure,
band,
exp(res@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond)))
}
}
}
}
names(df) <- colum_names
result_tone_df <- tbl_df(df)
result_tone_df$condition = "Tone"
# Join and all results ----------------------------------------------------
setwd("~/mnt/Hyp_meg/result")
result_table <- bind_rows(result_df, result_tone_df)
debugSource('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
result_table
View(result_table)
chains <- posterior(res, iterations = 100000)
f1 <- read.csv("deg_press_hyp_BA_beta_MTC_MNE.csv", header =F)
f1 <- as.matrix(f1)
f2 <- read.csv("deg_press_normal_beta.csv", header =F)
f2 <- as.matrix(f2)
f2
f1
res <- ttestBF(f2, f1)
chains <- posterior(res, iterations = 100000)
plot(chains)
res <- ttestBF(f2~f1)
plot(chains[,1:4])
plot(chains)
traceplot(chains)
traceplot(chains[, 1:2])
chains
chains@data
chains@model
chains@.S3Class
str(chains)
hitst(chains)
hist(chains)
install.packages("BayesFactor")
install.packages("BayesFactor")
res
summary(chains)
rresult_table %>% filter(pvalue > 3)
result_table %>% filter(pvalue > 3)
library(dplyr)
result_table %>% filter(pvalue > 3)
mutate(result_table, diff = mean_normal - mean_hyp)
result_table <- mutate(result_table, diff = mean_normal - mean_hyp)
result_table %>% filter(pvalue > 3)
for (atlas in atlases){
for (measure in measures){
for (band in bands){
normal_cond = read.csv(paste(measure, "_press_normal_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
hyp_cond = read.csv(paste(measure, "_press_hyp_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
normal_cond <- as.matrix(normal_cond)
hyp_cond <- as.matrix(hyp_cond)
result <- ttestBF(normal_cond, hyp_cond)
result_name <- paste(atlas, "_", measure, "_", band, sep = "")
assign(result_name, result)
if (counter == 1){
df <- data.frame(atlas,
measure,
band,
exp(result@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond))
counter <- 2}
else {
df <- rbind(df, data.frame(atlas,
measure,
band,
exp(result@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond)))
}
}
}
}
names(df) <- colum_names
result_df <- tbl_df(df)
result_df$condition = "Press"
setwd("/home/mje/mnt/Hyp_meg/scratch/Tone_task_MNE/network_connect_res")
# Libraries ----------------------------------------------------------------
library(dplyr)
library(BayesFactor)
# PRESS load data and run permutation tests--------------------------------------
measures <- c("eff", "deg", "trans")
bands = c("theta", "alpha", "beta", "gamma_low", "gamma_high")
atlases <- c("BA")
colum_names <- c("atlas", "measure", "band", "pvalue",
"mean_normal", "mean_hyp", "sd_normal", "sd_hyp")
counter <- 1
for (atlas in atlases){
for (measure in measures){
for (band in bands){
normal_cond = read.csv(paste(measure, "_press_normal_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
hyp_cond = read.csv(paste(measure, "_press_hyp_",
atlas, "_",
band, "_MTC_MNE.csv", sep=""),
header = FALSE)
normal_cond <- as.matrix(normal_cond)
hyp_cond <- as.matrix(hyp_cond)
result <- ttestBF(normal_cond, hyp_cond)
result_name <- paste(atlas, "_", measure, "_", band, sep = "")
assign(result_name, result)
if (counter == 1){
df <- data.frame(atlas,
measure,
band,
exp(result@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond))
counter <- 2}
else {
df <- rbind(df, data.frame(atlas,
measure,
band,
exp(result@bayesFactor$bf),
mean(normal_cond),
mean(hyp_cond),
sd(normal_cond),
sd(hyp_cond)))
}
}
}
}
names(df) <- colum_names
result_df <- tbl_df(df)
result_df$condition = "Press"
result_df
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
filter(result_table, pvalu > 3)
filter(result_table, pvalue > 3)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R')
filter(result_table, pvalue > 3)
filter(result_table, BF > 3)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R')
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
filter(result_table, BF > 3)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
View(result_table)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
View(result_table)
res_perm <- result_table
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
filter(result_table, BF > 3)
filter(res_perm, fdr < 0.05)
filter(res_perm, fdr < 0.05)
res_perm
filter(res_perm, fdr_corr < 0.05)
filter(result_table, BF > 3)
filter(result_table, BF > 3 | BF < 0.3)
f1 <- read.csv("deg_press_hyp_DA_beta_MTC_MNE.csv", header =F)
f2 <- read.csv("deg_press_normal_beta.csv_BA_beta_MTC_MNE.csv", header =F)
f1 <- read.csv("deg_press_hyp_DA_alpha_MTC_MNE.csv", header =F)
f2 <- read.csv("deg_press_normal_DA_alpha_MTC_MNE.csv", header =F)
f1 <- as.matrix(f1)
f2 <- as.matrix(f2)
ttestBF(f2,f1)
ttestBF(f1,f2)
deg_alpha <- ttestBF(f2,f1)
chains_deg_alpha <- chains(deg_alpha)
chains_deg_alpha <- chain(deg_alpha)
deg_alpha <- ttestBF(f2,f1)
chains_deg_alpha <- posterior(deg_alpha, iterations = 100000)
summary(chains_deg_alpha)
plot(chains_deg_alpha)
library(BEST)
BESTout <- BESTmcmc(f2, f1)
plotAll(BESTout)
summary(BESTout)
BESTout
filter(result_table, BF > 3)
e1 <- read.csv("eff_press_hyp_DA_alpha_MTC_MNE.csv")
e2 <- read.csv("eff_press_normal_DA_alpha_MTC_MNE.csv", header=F)
e1 <- read.csv("eff_press_hyp_DA_alpha_MTC_MNE.csv", header=F)
e1 <- as.matrix(e1)
e2 <- as.matrix(e2)
ttestBF(e1 ,e2)
BEST_eff <- BESTmcmc(e1 ,e2)
summary(BEST_eff)
plotAll(BEST_eff)
BEST_eff <- BESTmcmc(e2 ,e1)
plotAll(BEST_eff)
summary(BEST_eff)
BEST_eff
BEST_eff$mu1
mean(BEST_eff$mu1) - mean(BEST_eff$mu2)
BEST_eff$mu1
mean(BEST_eff$mu1) - mean(BEST_eff$mu2)
BEST_eff
summary(BEST_eff)
foo <- summary(BEST_eff)
str(foo)
foo[3,]
round(foo[3,], 3)
round(foo[3,], 4)
round(foo[3,], 6)
class(foo)
bar <- tbl_df(foo)
bar <- tbl_df(as.data.frame(foo))
bar
as.data.frame(foo)
str(foo)
foo@
saddfsa
foo$
s
as.matrix(fo)
as.matrix(foo)
foo
foo[1,]
foo[,1]
foo[,0]
foo
eff_tt <- ttestBF(e1, e2)
eff_tt)
eff_tt
BFManual()
as.data.frame(eff_tt)
tmp ? as.data.frame(eff_tt)
tmp <- as.data.frame(eff_tt)
tmp
tmp$error
str(tmp)
tmp[1]
?ttestBF
plot(eff_tt[, "mu"])
eff_tt <- ttestBF(e1, e2, posterior = TRUE)
eff_tt <- ttestBF(e1, e2, posterior = TRUE, iterations=1000 )
plot(eff_tt[, "mu"])
eff_tt <- ttestBF(e1, e2, posterior = TRUE, iterations=10000 )
plot(eff_tt[, "mu"])
eff_tt
summary(eff_tt)
plot(eff_tt)
str(eff_tt)
eff_tt@.S3Class
eff_tt@model
plot(e1~e2)
pairs(e1,e2)
cor(e1,e2)
cor.test(e1,e2)
plot(e1,e2)
plot(e1)
plot(e2)
scatter.smooth(e1,e2)
boxplot(e1,e2)
boxplot(e1~e2)
boxplot(e)
boxplot(e1)
boxplot(e2)
boxplot(e1,e2)
boxplot(c(e1,e2))
1/eff_tt
eff_tt <- ttestBF(e1, e2)
eff_tt
1/eff_tt
plot(e1 ~ e2)
plot(e1 ~ e2)
?ttestBF
eff_tt
f1
f2
foo <- ttestBF(f1,f2)
foo
BEST_foo <- BESTmcmc(f1, f2)
summary(BEST_foo)
foo
foo_chains = posterior(foo, iterations = 1e+05)
summary(foo_chains)
summary(BEST_foo)
(28.656+26.343)/2
?ttestBF
foo2 <- ttestBF(x = f1, y = f2)
foo2
chains2 <- posterior(foo2, iterations = 1e+05)
summary(chains2)
summary(foo_chains)
foo2
foo
BEST_foo
summary(BEST_foo)
plotAll(BEST_foo)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/perm_test_network_results.R', echo=TRUE)
filter(res_perm, fdr_corr < 0.05)
filter(res_perm, fdr_corr < 0.05) | arrange(fdr_corr)
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr)
?arrange
filter(res_perm, fdr_corr < 0.05) %>% desc(fdr_corr)
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr)
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr, desc)
filter(res_perm, fdr_corr < 0.05) %>% arrange(desc(fdr_corr))
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr, desc)
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr)
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr)
filter(result_table, BF > 3) %>% arrange(bf)
filter(result_table, BF > 3) %>% arrange(BF)
filter(result_table, BF > 3)
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
filter(result_table, BF > 3)
filter(result_table, BF > 3) %>% arrange(BF)
filter(result_table, BF > 3) %>% arrange(desc(BF))
filter(res_perm, fdr_corr < 0.05) %>% arrange(fdr_corr)
filter(result_table, band == "gamma_low")
source('~/Projects/Hyp_MEG_MNE/network_analysis_R/BF_test_network_results.R', echo=TRUE)
View(result_table)
install.packages(c("lme4", "stringdist", "stringi"))
news(Version=="1.1.8",package="lme4")
